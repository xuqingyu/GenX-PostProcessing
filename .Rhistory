rm(temp_drsaving)
}
}
}
}
rm(temp_generator_fn, temp_genprofit_fn,temp_genprofit_all, temp_generator )
if (exists('tfsloadcost')) {rm(tfsloadcost)}
for ( i in 1:length(cases)) {
for (j in 1:length(years)) {
temp_tfsloadcost_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/tfs_loadcost.csv");
if (file.exists(temp_tfsloadcost_fn)) {
temp_tfsloadcost <- read_csv(temp_tfsloadcost_fn, col_types = cols()) %>%
mutate(case = cases[i], year = years[j]) %>%
rename(TEACCost = AnnualSum, Policy = Policy_ID)
if(!exists('tfsloadcost')) {
tfsloadcost <- temp_tfsloadcost;
rm(temp_tfsloadcost)
} else {
tfsloadcost <- rbind(tfsloadcost, temp_tfsloadcost)
rm(temp_tfsloadcost)
}
}
}
}
tfsloadcost <- tfsloadcost %>%
mutate(Policy = as.character(Policy))
rm(temp_tfsloadcost_fn)
if (exists('tfsexportrevenue')) {rm(tfsexportrevenue)}
for ( i in 1:length(cases)) {
for (j in 1:length(years)) {
temp_tfsexport_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/tfs_exportrevenue.csv");
if (file.exists(temp_tfsexport_fn)) {
temp_tfsexport <- read_csv(temp_tfsexport_fn, col_types = cols()) %>%
mutate(case = cases[i], year = years[j]) %>%
rename(TEACExchange = AnnualSum, Policy = Policy_ID)
if(!exists('tfsexportrevenue')) {
tfsexportrevenue <- temp_tfsexport;
rm(temp_tfsexport)
} else {
tfsexportrevenue <- rbind(tfsexportrevenue, temp_tfsexport)
rm(temp_tfsexport)
}
}
}
}
tfsexportrevenue <- tfsexportrevenue %>%
mutate(Policy = as.character(Policy))
rm(temp_tfsexport_fn)
load_payment_withname_combined <- left_join(load_payment_withname, drsavings) %>%
mutate(`Energy Payment` = as.numeric(`Energy Payment`),
`Capacity Payment` = as.numeric(`Capacity Payment`)) %>%
mutate(`Energy Payment` = `Energy Payment` + natozero(`Energy Savings`),
`Capacity Payment` = `Capacity Payment` + natozero(`Capacity Savings`)) %>%
mutate(`Participated Load` = as.numeric(`Participated Load`)) %>%
select(-c(`Energy Savings`, `Capacity Savings`)) %>%
left_join(load_allocatedcost) %>%
left_join(ppanet) %>%
select(-c(`PPA Cost`, `Gen Benefit`));
if (exists('tfsloadcost')) {
load_payment_withname_combined <- left_join(load_payment_withname_combined,
tfsloadcost) %>%
mutate(TEACCost = natozero(TEACCost))
}
if (exists('tfsexportrevenue')) {
load_payment_withname_combined <- left_join(load_payment_withname_combined,
tfsexportrevenue) %>%
mutate(`TEAC Exchange` = -1* natozero(TEACExchange)) %>%
select(-`TEACExchange`)
}
if (exists('tfsprofit')) {
load_payment_withname_combined <- left_join(load_payment_withname_combined,
tfsprofit)
}
# nontfsrows = which(!grepl('nocip',load_payment_withname_combined$case))
# load_payment_withname_combined$`RPS Total Payment`[nontfsrows] <- load_payment_withname_combined$ESRRevenue[nontfsrows]
# load_payment_withname_combined <- select(load_payment_withname_combined, -c(ESRRevenue))
load_payment_withname_combined_long <- load_payment_withname_combined %>%
pivot_longer(cols = -c(case,year, Scenario, TechSensitivity, Policy, `Participated Load`)) %>%
mutate(value_permwh = value/`Participated Load`)
write_csv(load_payment_withname_combined_long, paste0(RunFdr,'/CompiledResults/tfs_lse_cost.csv'))
rm(load_payment_withname_combined_long, load_payment_withname_combined,nontfsrows)
if (exists('load_payment')) {rm(load_payment, load_payment_withname)}
for ( i in 1:length(cases)){
for (j in 1:length(years)){
temp_timeweight_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/time_weights.csv")
temp_timeweight <- read_csv(temp_timeweight_fn, col_types = cols())
temp_energyprice_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/prices.csv");
temp_energyprice <- read_csv(temp_energyprice_fn, col_types = cols())[,-1]
temp_capres_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Inputs/Capacity_reserve_margin.csv");
temp_capres <- read_csv(temp_capres_fn, col_types = cols())[,-c(1,2)] %>%
as.matrix()
temp_capacityprice_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/ReserveMargin.csv") %>%
as.matrix()
temp_capacityprice <- read_csv(temp_capacityprice_fn, col_types = cols())[,-1]
representative_point <- read_csv(paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],'/Inputs/Representative_Period.csv'),
col_types = cols())
reduced_load_file <- read_csv(paste0(paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i], '/Inputs/Load_data.csv')), col_types = cols())
reduced_load = reduced_load_file[,-c(1:9)]
n_period = reduced_load_file$Rep_Periods[1]
n_hour_per_period = reduced_load_file$Timesteps_per_Rep_Period[1]
n_totalhour = n_hour_per_period*n_period
original_hourid = ((rep(as.numeric(str_remove(representative_point$slot,'p')),
each = n_hour_per_period) - 1) * n_hour_per_period +
rep(c(1:n_hour_per_period), times = n_period))
for (k in 1:n_tfs) {
cfe_load_ori <- read_csv(paste0(RunFdr,Studyregion,"_RPSH_Load_data_", k,".csv"), col_types = cols())[,-1]
temp_cfeload_all = cfe_load_ori[original_hourid, ]
if (cistudy == 1) {
if (grepl('_5ci', cases[i])) {
CIPurchaseRatio = 0.05
}
if (grepl('_10ci', cases[i])) {
CIPurchaseRatio = 0.10
}
if (grepl('_25ci', cases[i])) {
CIPurchaseRatio = 0.25
}
temp_cfeload_all = round(temp_cfeload_all*CIPurchaseRatio,0)
} else {
temp_cfeload_all = round(temp_cfeload_all,0)
}
temp_energypayment = sum(t(temp_cfeload_all * temp_energyprice) %*% temp_timeweight$Weight)
temp_capres_requirement = (1+apply(temp_capres,2,countercapres)) %>% as.matrix()
temp_capacitypayment = sum(t((as.matrix(temp_cfeload_all) %*% temp_capres_requirement) * temp_capacityprice) %*% temp_timeweight$Weight)
participatedload = sum(t(temp_cfeload_all) %*% temp_timeweight$Weight)
temp_row = as_tibble_row(c(case = cases[i],
year = years[j],
Policy = k,
`Energy Payment` = as.numeric(temp_energypayment),
`Capacity Payment` = as.numeric(temp_capacitypayment),
`Participated Load` = as.numeric(participatedload)))
if (!exists('load_payment')) {
load_payment <- temp_row
rm(temp_row, temp_energypayment, temp_capacitypayment, participatedload, temp_cfeload_all,CIPurchaseRatio, cfe_load_ori)
} else {
load_payment <- rbind(load_payment, temp_row)
rm(temp_row, temp_energypayment, temp_capacitypayment, participatedload, temp_cfeload_all,CIPurchaseRatio, cfe_load_ori)
}
}
}
}
load_payment_withname <- left_join(load_payment, cases_newnames, by = c('case' = 'case_description')) %>%
select(case,year,Scenario, TechSensitivity, Policy, `Energy Payment`,`Capacity Payment`, `Participated Load`)
# mutate(`Energy Payment ($/MWh)` = as.numeric(`Energy Payment`)/as.numeric(`Participated Load`))
write_csv(load_payment, paste0(RunFdr,"/CompiledResults/tfs_load_cost.csv"))
rm(temp_timeweight_fn,temp_timeweight,representative_point,reduced_load_file)
rm(temp_energyprice_fn,temp_energyprice)
rm(temp_capres_fn,temp_capres,temp_capacityprice_fn,temp_capacityprice)
rm(reduced_load, n_period,n_hour_per_period,n_totalhour,original_hourid)
# rm(load_payment,load_payment_withname)
# Transmission cost ----
# use the allocated transmission cost
# For CA, no existing transmission is added.
load_allcase = select(load_payment_withname, c(case,year,Scenario, TechSensitivity,Policy, `Participated Load`))
dg = read_csv(paste0(RunFdr, "/CompiledResults/",subreg,
"/Generation/Gen_Output_",subreg,".csv"),
col_types = cols()) %>%
filter(Fuel == 'DG Solar') %>%
select(case,year,AnnualOutput) %>%
rename(DG_AnnualOutput = AnnualOutput)
# note that in the 2022 runs of 24/7 DG is a separate resources so gross load is the calcualted annual laod;
# transmission level load is gross load - annual load.
load_allocatedcost <- read_csv(paste0(RunFdr, "/CompiledResults/",subreg,
"/Load/LSE_Payment_",subreg,".csv"),
col_types = cols()) %>%
select(case, year, AnnualLoad,`Transmission Cost`,`Congestion Revenue`,
`CO2 Revenue`,`Tech Subsidy Cost`,`RPS Total Payment`) %>%
left_join(dg) %>%
mutate(year = as.character(year),
`Gross Total` = as.numeric(AnnualLoad)) %>%
mutate(TransLoad = `Gross Total` - DG_AnnualOutput) %>%
left_join(load_allcase) %>%
mutate(`Participated Load`  = as.numeric(`Participated Load`)) %>%
mutate(TransRatio = `Participated Load`/TransLoad,
GrossRatio = `Participated Load`/`Gross Total`) %>%
mutate(`Transmission Cost` = `Transmission Cost`*TransRatio,
`Congestion Revenue` = `Congestion Revenue`*TransRatio,
`CO2 Revenue` = `CO2 Revenue`*GrossRatio,
`Tech Subsidy Cost` = `Tech Subsidy Cost`*GrossRatio,
`RPS Total Payment` = `RPS Total Payment`*GrossRatio) %>%
select(case, year, Scenario, TechSensitivity, Policy, `Transmission Cost`,
`Congestion Revenue`,`CO2 Revenue`,`Tech Subsidy Cost`,
`RPS Total Payment`, `Participated Load`)
load_allocatedcost$`RPS Total Payment`[which(!grepl('nocip',load_allocatedcost$case))] <- 0 # RPS total payment only make sense for no cip cases
# for all other cases which separate RPS constraints
if (exists('ppanet')) {rm(ppanet)}
if (exists('tfsprofit')) {rm(tfsprofit)}
if (exists('drsavings')) {rm(drsavings)}
# THis set up assumes the buyers first pay for whatever
for ( i in 1:length(cases)) {
for (j in 1:length(years)) {
temp_generator_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Inputs/Generators_data.csv");
temp_genprofit_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/NetRevenue.csv");
temp_genprofit_all <- read_csv(temp_genprofit_fn, col_types = cols())
temp_generator <- read_csv(temp_generator_fn, col_types = cols())
temp_tfsprofit_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/tfs_genrevenue.csv");
for (k in 1:n_tfs) {
if (!grepl('nocip', cases[i])) {
policy_column = which(colnames(temp_generator) ==paste0('RPSH_',k))
cfe_rows = which(temp_generator[,policy_column] == 1)
dr_rows = which(temp_generator$FLEX == 1)
stor_rows = which(temp_generator$STOR >= 1)
temp_tfsprofit <- read_csv(temp_tfsprofit_fn, col_types = cols())[setdiff(cfe_rows, union(dr_rows,stor_rows)),] %>%
mutate(Policy = k, case = cases[i], year = years[j]) %>%
select(case, year, Policy, Resource, Zone, AnnualSum) %>%
group_by(case, year, Policy) %>%
summarize(`TEAC Payment (Gen)` = sum(AnnualSum)) %>%
mutate(Policy= as.character(Policy))
temp_genprofit <- temp_genprofit_all[intersect(cfe_rows, stor_rows), ] %>%
mutate(Policy = k, case = cases[i], year = years[j]) %>%
mutate(`PPA Cost` = (Fixed_OM_cost_MW + Fixed_OM_cost_MWh + Var_OM_cost_out +
Var_OM_cost_in + Fuel_cost + Charge_cost + EmissionsCost +
StartCost + Inv_cost_MW + Inv_cost_MWh + SequestrationCost),
# `Gen Benefit` = (-1)*(EnergyRevenue + SubsidyRevenue +
#                         ReserveMarginRevenue + ESRRevenue + RegSubsidyRevenue)) %>%
`Gen Benefit` = (-1)*(EnergyRevenue + SubsidyRevenue +
ReserveMarginRevenue + RegSubsidyRevenue + CO2Credit)) %>%
# select(case, year, Policy, `PPA Cost`, `Gen Benefit`, ESRRevenue) %>%
select(case, year, Policy, `PPA Cost`, `Gen Benefit`) %>%
group_by(case, year, Policy) %>%
summarise(`PPA Cost` = sum(`PPA Cost`),
`Gen Benefit` = sum(`Gen Benefit`)) %>%
mutate(Policy = as.character(Policy),
`Storage Net Support` = (natozero(`PPA Cost`) +
natozero(`Gen Benefit`)))
temp_drsaving <- temp_genprofit_all[intersect(cfe_rows, dr_rows), ] %>%
mutate(Policy = k, case = cases[i], year = years[j]) %>%
mutate(`Energy Savings` = (Charge_cost - EnergyRevenue),
`Capacity Savings` = (-1)* (ReserveMarginRevenue)) %>%
select(case, year, Policy,  `Energy Savings`,`Capacity Savings`) %>%
group_by(case, year, Policy) %>%
summarise(`Energy Savings` = sum(`Energy Savings`),
`Capacity Savings` = sum(`Capacity Savings`)) %>%
mutate(Policy = as.character(Policy))
} else {
temp_genprofit <- as_tibble(cbind(case = cases[i], year = years[j],Policy = k,
`PPA Cost`= 0,
`Gen Benefit` = 0,
`Storage Net Support` = 0)) %>%
mutate(`PPA Cost` = as.numeric(`PPA Cost`),
`Gen Benefit` = as.numeric(`Gen Benefit`),
`Storage Net Support`= as.numeric(`Storage Net Support`))
temp_tfsprofit <- as_tibble(cbind(case = cases[i], year = years[j],Policy = k,
`TEAC Payment (Gen)`= 0)) %>%
mutate(`TEAC Payment (Gen)` = as.numeric(`TEAC Payment (Gen)`))
temp_drsaving <- as_tibble(cbind(Policy = k, case = cases[i], year = years[j],
`Energy Savings`= 0,`Capacity Savings` = 0)) %>%
mutate(`Energy Savings` = as.numeric(`Energy Savings`),
`Capacity Savings` = as.numeric(`Capacity Savings`))
}
if (!exists('tfsprofit')){
tfsprofit <- temp_tfsprofit
rm(temp_tfsprofit)
} else {
tfsprofit <- rbind(tfsprofit, temp_tfsprofit)
rm(temp_tfsprofit)
}
if(!exists('ppanet')) {
ppanet <- temp_genprofit;
rm(temp_genprofit, cfe_rows,policy_column)
} else {
ppanet <- rbind(ppanet, temp_genprofit)
rm(temp_genprofit, cfe_rows,policy_column)
}
if(!exists('drsavings')) {
drsavings <- temp_drsaving;
rm(temp_drsaving)
} else {
drsavings <- rbind(drsavings, temp_drsaving)
rm(temp_drsaving)
}
}
}
}
rm(temp_generator_fn, temp_genprofit_fn,temp_genprofit_all, temp_generator )
if (exists('tfsloadcost')) {rm(tfsloadcost)}
for ( i in 1:length(cases)) {
for (j in 1:length(years)) {
temp_tfsloadcost_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/tfs_loadcost.csv");
if (file.exists(temp_tfsloadcost_fn)) {
temp_tfsloadcost <- read_csv(temp_tfsloadcost_fn, col_types = cols()) %>%
mutate(case = cases[i], year = years[j]) %>%
rename(TEACCost = AnnualSum, Policy = Policy_ID)
if(!exists('tfsloadcost')) {
tfsloadcost <- temp_tfsloadcost;
rm(temp_tfsloadcost)
} else {
tfsloadcost <- rbind(tfsloadcost, temp_tfsloadcost)
rm(temp_tfsloadcost)
}
}
}
}
tfsloadcost <- tfsloadcost %>%
mutate(Policy = as.character(Policy))
rm(temp_tfsloadcost_fn)
if (exists('tfsexportrevenue')) {rm(tfsexportrevenue)}
for ( i in 1:length(cases)) {
for (j in 1:length(years)) {
temp_tfsexport_fn <- paste0(RunFdr,"/",years[j],"/",case_ids[i],"_",
years[j],"_",cases[i],"/Results/tfs_exportrevenue.csv");
if (file.exists(temp_tfsexport_fn)) {
temp_tfsexport <- read_csv(temp_tfsexport_fn, col_types = cols()) %>%
mutate(case = cases[i], year = years[j]) %>%
rename(TEACExchange = AnnualSum, Policy = Policy_ID)
if(!exists('tfsexportrevenue')) {
tfsexportrevenue <- temp_tfsexport;
rm(temp_tfsexport)
} else {
tfsexportrevenue <- rbind(tfsexportrevenue, temp_tfsexport)
rm(temp_tfsexport)
}
}
}
}
tfsexportrevenue <- tfsexportrevenue %>%
mutate(Policy = as.character(Policy))
rm(temp_tfsexport_fn)
load_payment_withname_combined <- left_join(load_payment_withname, drsavings) %>%
mutate(`Energy Payment` = as.numeric(`Energy Payment`),
`Capacity Payment` = as.numeric(`Capacity Payment`)) %>%
mutate(`Energy Payment` = `Energy Payment` + natozero(`Energy Savings`),
`Capacity Payment` = `Capacity Payment` + natozero(`Capacity Savings`)) %>%
mutate(`Participated Load` = as.numeric(`Participated Load`)) %>%
select(-c(`Energy Savings`, `Capacity Savings`)) %>%
left_join(load_allocatedcost) %>%
left_join(ppanet) %>%
select(-c(`PPA Cost`, `Gen Benefit`));
if (exists('tfsloadcost')) {
load_payment_withname_combined <- left_join(load_payment_withname_combined,
tfsloadcost) %>%
mutate(TEACCost = natozero(TEACCost))
}
if (exists('tfsexportrevenue')) {
load_payment_withname_combined <- left_join(load_payment_withname_combined,
tfsexportrevenue) %>%
mutate(`TEAC Exchange` = -1* natozero(TEACExchange)) %>%
select(-`TEACExchange`)
}
if (exists('tfsprofit')) {
load_payment_withname_combined <- left_join(load_payment_withname_combined,
tfsprofit)
}
# nontfsrows = which(!grepl('nocip',load_payment_withname_combined$case))
# load_payment_withname_combined$`RPS Total Payment`[nontfsrows] <- load_payment_withname_combined$ESRRevenue[nontfsrows]
# load_payment_withname_combined <- select(load_payment_withname_combined, -c(ESRRevenue))
load_payment_withname_combined_long <- load_payment_withname_combined %>%
pivot_longer(cols = -c(case,year, Scenario, TechSensitivity, Policy, `Participated Load`)) %>%
mutate(value_permwh = value/`Participated Load`)
write_csv(load_payment_withname_combined_long, paste0(RunFdr,'/CompiledResults/tfs_lse_cost.csv'))
rm(load_payment_withname_combined_long, load_payment_withname_combined,nontfsrows)
# the naming convention of PG is
# '[...]/[Running_folder]/[year]/[case_id]_[year]_[case_description]/Results/'
# so it is in fact preferable to feed in the setup folder;
RunFdr <- "/Users/qingyuxu/Documents/WECC_247_trade_ccs100_p500_new//"
# RunFdr <- "/tigress/qingyux/GenX/PJM/2022_PJM_CE/pjm_ce_all/"
settingfile <- 'postprocessing_inputs.csv';
# the naming convention of PG is
# '[...]/[Running_folder]/[year]/[case_id]_[year]_[case_description]/Results/'
# so it is in fact preferable to feed in the setup folder;
RunFdr <- "/Users/qingyuxu/Documents/WECC_247_trade_ccs100_p500_new//"
# RunFdr <- "/tigress/qingyux/GenX/PJM/2022_PJM_CE/pjm_ce_all/"
settingfile <- 'postprocessing_inputs.csv';
source('./code/Header.R')
# Level 1: Compiling ----
source('./code/level_1_compiling/compile_model_cost.R') #Done
source('./code/level_1_compiling/compile_model_zonal_cost.R') #Done
source('./code/level_1_compiling/compile_lse_nse_cost.R') #Done
source('./code/level_1_compiling/compile_energy_demand.R') # Done
source('./code/level_1_compiling/compile_nonserved_energy.R')
source('./code/level_1_compiling/compile_capacity.R') #Done
source('./code/level_1_compiling/compile_power_output.R') #Done
source('./code/level_1_compiling/compile_power_charge.R') #Done
source('./code/level_1_compiling/compile_power_curtailment.R') #Done
# source('./code/level_1_compiling/compile_capacity_value.R') #Done, but very time consuming, probably because the table is too wide
source('./code/level_1_compiling/compile_transmission.R') #Done
source('./code/level_1_compiling/compile_zonal_transmission_loss.R')
source('./code/level_1_compiling/compile_transmission_congestion_revenue.R') # Done
source('./code/level_1_compiling/compile_lse_transmission_loss_payment.R') # Done
source('./code/level_1_compiling/compile_generation_settlement.R') #Done
source('./code/level_1_compiling/compile_energy_price.R') #Done
source('./code/level_1_compiling/compile_capacity_price.R') #Done
# source('./code/level_1_compiling/compile_generation_data.R') # Currently not supported
source('./code/level_1_compiling/compile_carbon_emissions.R') #Done
source('./code/level_1_compiling/compile_carbon_cap_massbased.R') #Done
source('./code/level_1_compiling/compile_carbon_cap_massbased_price.R') #Done
source('./code/level_1_compiling/compile_carbon_cap_massbased_lse_revenue.R') #Done
source('./code/level_1_compiling/compile_carbon_cap_loadbased.R') # Done
source('./code/level_1_compiling/compile_carbon_cap_loadbased_price.R') # Currently not supported
source('./code/level_1_compiling/compile_carbon_cap_loadbased_lse_revenue.R') # Currently not supported
# source('./code/level_1_compiling/compile_carbon_cap_genbased.R') # Currently not supported
# source('./code/level_1_compiling/compile_carbon_cap_genbased_price.R') # Currently not supported
source('./code/level_1_compiling/compile_carbon_tax_cost_n_revenue.R') # Done
source('./code/level_1_compiling/compile_renewable_energy_requirement.R') #Done
source('./code/level_1_compiling/compile_renewable_energy_price.R') # Done
source('./code/level_1_compiling/compile_energy_lse_payment.R') # Done
source('./code/level_1_compiling/compile_capacity_lse_payment.R') # Done
source('./code/level_1_compiling/compile_capacity_trans_revenue.R') # Done
source('./code/level_1_compiling/compile_renewable_energy_lse_payment.R')
# Level 2: Result Calculation ----
source('./code/level_2_calculation/stitch_lse_payment_wo_transmission_allocation.R') # Done
source('./code/level_2_calculation/transmission_congestion_n_cost_for_allocation.R') # Done
source('./code/level_2_calculation/transmission_cost_allocation.R') # Done
# we don't do transmission capacity revenue allocation since
# they are supposed to be earned by outside generations
# Level 3: Polishing ----
# Subregional Aggregation and add case name
source('./code/level_3_polishing/energy_price_add_scenario_techsensitivity_name.R') #Done
source('./code/level_3_polishing/energy_price_timeseries.R') #Done
source('./code/level_3_polishing/capacity_price_add_scenario_techsensitivity_name.R') #Done
source('./code/level_3_polishing/capacity_price_timeseries.R') #Done
source('./code/level_3_polishing/subregion_aggregate_gen_profit.R') # #Done
source('./code/level_3_polishing/subregion_aggregate_gen_capacity.R') #Done
# source('./code/level_3_polishing/subregion_aggregate_gen_capacity_value.R') #Done
source('./code/level_3_polishing/subregion_aggregate_gen_misc.R') #Done
source('./code/level_3_polishing/subregion_aggregate_gen_output.R') #Done
# source('./code/level_3_polishing/subregion_aggregate_gen_output_timeseries.R') # time consuming
source('./code/level_3_polishing/subregion_aggregate_gen_curtailment.R') #Done
source('./code/level_3_polishing/subregion_aggregate_gen_clean_output.R') #Done
source('./code/level_3_polishing/subregion_aggregate_storage_operation.R') #Done
source('./code/level_3_polishing/subregion_aggregate_load_component.R') # This is currently tailored for PJM.
# source('./code/level_3_polishing/subregion_aggregate_load_timeseries.R') # This will use gen_output time-series because flexible load is used.
source('./code/level_3_polishing/subregion_aggregate_lse_payment.R') # Currently not supported, missing file
source('./code/level_3_polishing/subregion_aggregate_system_cost.R') # Currently not supported, missing file
source('./code/level_3_polishing/subregion_aggregate_emissions.R') # Not fully supported
source('./code/level_3_polishing/subregion_aggregate_emission_v_systemcost.R')
# source('./code/level_3_polishing/subregion_aggregate_renewable_market.R') # Currently not supported, missing file
source('./code/level_3_polishing/subregion_aggregate_netimport.R')
library(tidyverse)
Studyregion = 'WECC' #WECC
natozero <- function(x) {x[which(is.na(x))] <-0; return(x)}
negtozero <- function(x) {x[x<=0] <-0; return(x)}
countercapres <- function(x) {x[x==0] <- (-1); return(x)}
n_tfs = 5
cistudy = 0
settingfile <- 'postprocessing_inputs.csv';
if(Studyregion == 'PJM'){
subreg = 'PJM_Google'
RunFdr <- "/Users/qingyuxu/Documents/PJM_247/";
if (n_tfs == 1 & cistudy == 1) {
cfe_load_ori <- read_csv(paste0(RunFdr,'PJM_RPSH_Load_data_1.csv'),
col_types = cols())
}
} else {
subreg = 'California'
RunFdr <- "/Users/qingyuxu/Documents/WECC_247_trade_ccs100_p500/";
if (n_tfs == 1 & cistudy == 1) {
cfe_load_ori <- read_csv(paste0(RunFdr,'WECC_RPSH_Load_data_1.csv'),
col_types = cols())
}
}
source('./code/Header.R')
source('./code/googlecfe2022/cfe_table_compile.R')
source('./code/googlecfe2022/cfe_emission_table_compile.R')
source('./code/googlecfe2022/cfe_system_emission_table_compile.R')
source('./code/googlecfe2022/cfe_capacity_compile.R')
source('./code/googlecfe2022/cfe_output_compile.R')
source('./code/googlecfe2022/cfe_curtailment_compile.R')
source('./code/googlecfe2022/cfe_gen_ts.R')
source('./code/googlecfe2022/cfe_modifiedload_compile.R')
source('./code/googlecfe2022/cfe_load_payment_compile.R')
source('./code/googlecfe2022/cfe_netexport_compile.R')
source('./code/googlecfe2022/cfe_importexport_compile.R')
library(tidyverse)
Studyregion = 'WECC' #WECC
natozero <- function(x) {x[which(is.na(x))] <-0; return(x)}
negtozero <- function(x) {x[x<=0] <-0; return(x)}
countercapres <- function(x) {x[x==0] <- (-1); return(x)}
n_tfs = 5
cistudy = 0
settingfile <- 'postprocessing_inputs.csv';
if(Studyregion == 'PJM'){
subreg = 'PJM_Google'
RunFdr <- "/Users/qingyuxu/Documents/PJM_247/";
if (n_tfs == 1 & cistudy == 1) {
cfe_load_ori <- read_csv(paste0(RunFdr,'PJM_RPSH_Load_data_1.csv'),
col_types = cols())
}
} else {
subreg = 'California'
RunFdr <- "/Users/qingyuxu/Documents/WECC_247_trade_ccs100_p500_new//";
if (n_tfs == 1 & cistudy == 1) {
cfe_load_ori <- read_csv(paste0(RunFdr,'WECC_RPSH_Load_data_1.csv'),
col_types = cols())
}
}
source('./code/Header.R')
p_width = 12
p_height = 7
source('./code/googlecfe2022/cfe_table_compile.R')
source('./code/googlecfe2022/cfe_emission_table_compile.R')
source('./code/googlecfe2022/cfe_system_emission_table_compile.R')
source('./code/googlecfe2022/cfe_capacity_compile.R')
source('./code/googlecfe2022/cfe_output_compile.R')
source('./code/googlecfe2022/cfe_curtailment_compile.R')
source('./code/googlecfe2022/cfe_gen_ts.R')
source('./code/googlecfe2022/cfe_modifiedload_compile.R')
source('./code/googlecfe2022/cfe_load_payment_compile.R')
source('./code/googlecfe2022/cfe_netexport_compile.R')
source('./code/googlecfe2022/cfe_importexport_compile.R')
